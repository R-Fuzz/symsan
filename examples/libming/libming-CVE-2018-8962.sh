#!/bin/bash

set -euo pipefail

#for aflgo
git clone https://github.com/libming/libming.git libming-CVE-2018-8962
cd libming-CVE-2018-8962/; git checkout b72cc2f # version 0.4.8
export LIBMING_SRC=$PWD
export BUILD_DIR=$LIBMING_SRC/build
mkdir $BUILD_DIR

echo $'decompile.c:398' > $AFLGO_TARGET_DIR/BBtargets.txt

# generate whole program bitcode
export CC=clang-12
export CXX=clang++-12
cd ..; mkdir obj-dist; pushd obj-dist
ADDITIONAL="-flto -fuse-ld=gold -Wl,-plugin-opt=lsave-temps"
CFLAGS="-g -fno-omit-frame-pointer -Wno-error $ADDITIONAL" CXXFLAGS="-g -fno-omit-frame-pointer -Wno-error $ADDITIONAL" ../configure --disable-shared --disable-freetype --prefix=`pwd`
make clean; make -j swftophp
cp util/swftophp.0.0.preopt.bc $BUILD_DIR
cp util/swftophp $BUILD_DIR/swftophp_orig
popd

# set ENV vars
export KO_CXX=clang++-12
export KO_CC=clang-12
export MAZERUNNER_SRC=/workdir/symsan
export CXX=$MAZERUNNER_SRC/build/bin/ko-clang++
export CC=$MAZERUNNER_SRC/build/bin/ko-clang
export KO_ADD_AFLGO=1
export KO_DONT_OPTIMIZE=1
export KO_USE_FASTGEN=1
export KO_NO_NATIVE_ZLIB=1
export AFLGO_TARGET_DIR=$LIBMING_SRC/symsan/targets

# generate CFGs
export AFLGO_PREPROCESSING=1
# method 1: build everything
CFLAGS="-fcommon -g -fno-omit-frame-pointer -Wno-error" CXXFLAGS="-g -fno-omit-frame-pointer -Wno-error" ./configure --disable-shared --disable-freetype --prefix=`pwd`
make clean; make -j$(nproc)
pushd util; make clean && make -j swftophp; popd
# method 2 (better): get CFG only from bcfile.txt.
# bcfile.txt is a list of bc files that retrieved from the build log
export AFLGO_PREPROCESSING=1
while IFS= read -r line
do
  FILE_PATH="${LIBMING_SRC}/obj-dist/${line}"
  opt -load $MAZERUNNER_SRC/build/lib/symsan/libAFLGOPass.so -outdir=$AFLGO_TARGET_DIR -targets=$AFLGO_TARGET_DIR/BBtargets.txt "$FILE_PATH" -O0 -o /dev/null

done < "${LIBMING_SRC}/obj-dist/bcfile.txt"

# indirect call pointer analysis
/workdir/kernel-analyzer/build/lib/KAMain --target-list=${AFLGO_TARGET_DIR}/BBtargets.txt @${BINUTILS_SRC}/obj-dist/bcfile.txt

# compute distances
pushd $AFLGO_TARGET_DIR
wpa -print-fp -ander -dump-callgraph swftophp.0.0.preopt.bc &> indirect_call_analysis.log
python3 static_analysis.py $AFLGO_TARGET_DIR
popd

# instrument distances
unset AFLGO_PREPROCESSING
export CXX=$MAZERUNNER_SRC/build/bin/ko-clang++
export CC=$MAZERUNNER_SRC/build/bin/ko-clang
../autogen.sh; CFLAGS="-fcommon" ../configure --disable-shared  --disable-freetype --prefix=`pwd`
make clean; make -j$(nproc)
# optional: compile swftophp manully to link instrumented zlib
# clang-12 -DSWFPHP -g -O2 -Wall -fPIC -DSWF_LITTLE_ENDIAN -o swftophp swftophp-outputscript.o swftophp-main.o ./.libs/libutil.a ../src/.libs/libming.a /workdir/zlib-build/lib/libz.a -lfreetype -Xclang -load -Xclang /workdir/symsan/build/bin/../lib/symsan/libTaintPass.so -mllvm -taint-abilist=/workdir/symsan/build/bin/../lib/symsan/dfsan_abilist.txt -Xclang -load -Xclang /workdir/symsan/build/bin/../lib/symsan/libAFLGOPass.so -mllvm -outdir=/workdir/libming/CVE-2018-8962/targets -mllvm -distance=/workdir/libming/CVE-2018-8962/targets/distance.cfg.txt -pie -fpic -Qunused-arguments -fno-vectorize -fno-slp-vectorize -g -O0 -Wl,--whole-archive /workdir/symsan/build/bin/../lib/symsan/libAFLGORT.a -Wl,--whole-archive /workdir/symsan/build/bin/../lib/symsan/libdfsan_rt-x86_64.a -Wl,--no-whole-archive -Wl,--dynamic-list=/workdir/symsan/build/bin/../lib/symsan/libdfsan_rt-x86_64.a.syms -Wl,-T/workdir/symsan/build/bin/../lib/symsan/taint.ld -lc++ -lc++abi -lunwind -lrt -Wl,--no-as-needed -Wl,--gc-sections -ldl -lpthread -lm -Wl,--whole-archive /workdir/symsan/build/bin/../lib/symsan/libFastgen.a -Wl,--no-whole-archive
cp util/swftophp $BUILD_DIR/swftophp_symsan_NM

# check if the binary is corrected built:
nm util/swftophp | grep __afl_auto_init
pushd $BUILD_DIR
rm -rf Output; mkdir Output
cp $MAZERUNNER_SRC/examples/libming/in $BUILD_DIR
TAINT_OPTIONS="taint_file=$BUILD_DIR/in/bumble-bee1.swf:output_dir=Output:debug=0" $MAZERUNNER_SRC/mazerunner/fgtest.py ./swftophp_symsan_NM $BUILD_DIR/in/bumble-bee1.swf
popd
