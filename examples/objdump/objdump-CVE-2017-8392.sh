#!/bin/bash

set -euo pipefail

# checkout the source code
git clone git://sourceware.org/git/binutils-gdb.git binutils_CVE-2017-8392
cd binutils; git checkout a6c21d4a553de184562fd8409a5bcd3f2cc2561a
export MAZERUNNER_SRC=/workdir/symsan
export BINUTILS_SRC=$PWD
export BUILD_DIR=$BINUTILS_SRC/build
mkdir $BUILD_DIR
cp -r $MAZERUNNER_SRC/experiments/objdump/in $BINUTILS_SRC

# get target
echo $'dwarf2.c:4212' > $AFLGO_TARGET_DIR/BBtargets.txt

# generate whole program bitcode
export CC=clang-12
export CXX=clang++-12
cd ..; mkdir obj-dist; cd obj-dist
CFLAGS="-DFORTIFY_SOURCE=2 -fstack-protector-all -fno-omit-frame-pointer -g -Wno-error -flto -fuse-ld=gold -Wl,-plugin-opt=save-temps" LDFLAGS="-ldl -lutil" ../configure --disable-shared --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --disable-ld
make clean; make -j$(nproc)
cp binutils/objdump.0.0.preopt.bc $BUILD_DIR
cp binutils/objdump $BUILD_DIR/objdump_orig

# set ENV vars
export KO_CXX=clang++-12
export KO_CC=clang-12
export CXX=$MAZERUNNER_SRC/build/bin/ko-clang++
export CC=$MAZERUNNER_SRC/build/bin/ko-clang
export KO_ADD_AFLGO=1
export KO_DONT_OPTIMIZE=1
export KO_USE_FASTGEN=1
export KO_NO_NATIVE_ZLIB=1
export LDFLAGS=-lpthread
export AFLGO_TARGET_DIR=$BINUTILS_SRC/symsan/targets

# generate CFGs
# method 1: build everything
CFLAGS="-DFORTIFY_SOURCE=2 -fstack-protector-all -fno-omit-frame-pointer -g -Wno-error" LDFLAGS="-ldl -lutil" ../configure --disable-shared --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --disable-ld
make clean; make -j$(nproc)
pushd binutils; make clean && make objdump; popd
# method 2 (better): get CFG only from bcfile.txt.
# bcfile.txt is a list of bc files that retrieved from the build log
export AFLGO_PREPROCESSING=1
while IFS= read -r line
do
  FILE_PATH="${BINUTILS_SRC}/obj-dist/${line}"
  opt -load $MAZERUNNER_SRC/build/lib/symsan/libAFLGOPass.so -outdir=$AFLGO_TARGET_DIR -targets=$AFLGO_TARGET_DIR/BBtargets.txt "$FILE_PATH" -O0 -o /dev/null

done < "${BINUTILS_SRC}/obj-dist/bcfile.txt"

# indirect call pointer analysis
/workdir/kernel-analyzer/build/lib/KAMain --target-list=${AFLGO_TARGET_DIR}/BBtargets.txt @${BINUTILS_SRC}/obj-dist/bcfile.txt

# compute distances
export SVF=/workdir/SVF
pushd $SVF; source ./setup.sh; popd
pushd $AFLGO_TARGET_DIR
wpa -print-fp -ander -dump-callgraph objdump.0.0.preopt.bc &> indirect_call_analysis.log
python3 static_analysis.py $AFLGO_TARGET_DIR
popd

# instrument distances
unset AFLGO_PREPROCESSING
export CXX=$MAZERUNNER_SRC/build/bin/ko-clang++
export CC=$MAZERUNNER_SRC/build/bin/ko-clang
CFLAGS="-DFORTIFY_SOURCE=2 -fstack-protector-all -fno-omit-frame-pointer -g -Wno-error" LDFLAGS="-ldl -lutil" ../configure --disable-shared --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --disable-ld
make clean; make -j$(nproc)
cp binutils/objdump $BUILD_DIR/objdump_symsan_NM

# check if the binary is corrected built:
nm binutils/objdump | grep __afl_auto_init
pushd $BUILD_DIR
rm -rf Output; mkdir Output
cp $MAZERUNNER_SRC/examples/objdump/in $BUILD_DIR
BIN_ARGS="-SD" TAINT_OPTIONS="taint_file=$BUILD_DIR/in/test:output_dir=Output:debug=0" $MAZERUNNER_SRC/mazerunner/fgtest.py ./objdump_symsan_NM $BUILD_DIR/in/test
popd
