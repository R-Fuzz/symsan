syntax = "proto3";

package rgd;

service RGD {
  rpc sendExpression (AstNode) returns (JitReply) {}
  rpc sendCmd (JitCmd) returns (JitReply) {}
  rpc sendCmdv2 (JitCmdv2) returns (JitReply) {}
  rpc startNewSession (ResetCmd) returns (JitReply) {}
}

message JitEmpty {}

message JitCmdv2 {
  uint32 cmd = 1; //reset;solve;expression
  int32 test_value = 2; //this the value output by Z3
	repeated bytes expr_string = 3; //
//	repeated AstNode expr = 3; //
	string file_name = 4;
	uint64 bhash = 5;
	uint64 shash = 6;
	bool direction = 7;
	repeated AstNode expr = 8;
}

message ResetCmd {
	string file_name = 1;
}

message JitBranchContext {
	uint64 bhash = 1;
	uint64 shash = 2;
	uint32 order = 3;
	bool direction = 4;
}

message JitCmd {
  uint32 cmd = 1; //reset;solve;expression
  int32 test_value = 2; //this the value output by Z3
}

// AST node for symbolic expressions
message AstNode {
  uint32 kind = 1;
  uint32 boolvalue = 2;  //used by bool expr
  uint32 bits = 3;
  string value = 4;  //used by constant expr
  repeated AstNode children = 5;
  string name = 6;  //used for debugging
  uint32 index = 7;  //used by read expr for index and extract expr
  uint32 label = 8;  //for expression dedup
  uint32 hash = 9;  //for node dedup
	uint32 direction = 10;
	uint32 sessionid = 11;
	uint32 full = 12;
}

// The response message containing the greetings
message JitReply {
  string message = 1;
}

message DupReply {
  bool dup = 1;
}

message BmReply {
	bytes bm = 1;
}
